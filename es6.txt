				 React Native
...................................................................................

			   Software setup
...................................................................................
1.node.js - 14 onwards
2.vs code 
....................................................................................
What is javascript?
 Javascript is programming language.
 Javascript is Object based,functional style programming language.

Why javascript was created?
  javascript was created for web computing , to process rendred html inside browser
js language for processing rendered html pages, which was called "DOM Programming"
 After 2007,after node js, js moved into building server side apps
 After 2008, js moved into mobile app dev as well.

Now a days, js is every where.

What is ecma?
Ecma International is an industry association dedicated to the standardization of information and communication systems

after js created by netscap , the language was submitted to ECMA committe. ECMA committe standarized the language, according to ecma

javascript and its version
1.js/ecma/es 1.0
2.es 3.0
3.es 4.0
4.es 5.0
6.es 6.0/ecma 2012 to 2015
7.es 7
8.es 8
9.es 9
10.es 10

What is ES(ECMA Script) 6?
  ES 6 is new Javascript version

JS session plan:

1.JS language fundamentals
2.JS functions
3.js objects and features
4.async programming and styles


1.JS language fundamentals

1.variable declarations
 var - ES 5 keyword - dont use in ES 6 application
 let /const - es 6 keywords

2.literals -values
   strings,numbers,boolean,undefined,NaN,infinity,function,null,object
....................................................................................
			   Project setup
..................................................................................


steps:
E:\session\IBM\2022\nov\reactnative>mkdir es6apps
E:\session\IBM\2022\nov\reactnative>cd  es6apps
E:\session\IBM\2022\nov\reactnative\es6apps>mkdir src
E:\session\IBM\2022\nov\reactnative\es6apps>code .


How to compile js code? and How to run compiled code?

Unlike java,c, c++, js has no separate compiler, rather compiler is packed along with
one software called "java script engine"

javascript is engine is program distributed by many browser vendors.

google chrome - v8

google release v8 in two mode

1.standalone mode - node js
2.embeded mode - part of browser(chrome)

by js programs are not compiled and kept inside disk rather js engine compiles the code onfly and run it.
....................................................................................

Javascript is dynamic typed - The datatype of variable is idenfitied during runtime only.

Literals
 strings,
 numbers,
 boolean,
 undefined,
 NaN,
 infinity,
 function,
 null,
 object

variable declaration:

 var | let | const variableName=literal(value)

 var vs let
 let vs const


strings 

1. declared using  "" ,'',``(es6)
2. 16 bit unicode character

`` - back tick notation:
-string interpolation
-multi line string literal

//variable declaration; string
//using var 
var firstName = "Subramanian"
//using let 
let lastName = "Murugan"
//log 
console.log("Name" + firstName + lastName);
console.log("Name ", firstName, lastName);
//es 6 back tick notation
console.log(`Name ${firstName} ${lastName}`);

//using es 5 + operator
let title = 'IBM'
let doc = "<html>" +
    "<head>" +
    "<title>" + title + "</title>" +
    "</head>" +
    "<body>" +
    "<h1>Hello</h1>" +
    "</body>";
console.log(doc)

//backtic noation : multi line strings
let docOne = `<html>
           <head>
            <title>${title}</title>
            </head>
          <body>
            <h1>Hello</h1>
          </body>
        `;
console.log(docOne)

...................................................................................

2.Numbers

-all numbers size is 64 bit aka double.

//numbers
let qty = 100
let price = 1000
let totalPrice = qty * price
console.log(`The Price is ${totalPrice}`);

...................................................................................

3.Booleans
  - 1 bit value eiether 0 or 1;
 - offers built in literal value called true/false

// ; optional booleans

let isValid = true
let isEnabled = false
console.log(`Is Valid ${isValid} is Enabled ${isEnabled}`)

.............................................................................

3.undefined:
 -undefined; if variable declared but not initalized with any valid literals
//undefined 
let qty
let price 
console.log(`Qty ${qty} Price ${price}`)


4.NaN -  Not a Number

 -NaN - not a number; it is numerical error code.during numerical computation, 

js engine
 -may throw error - NaN ; 
 -NaN is not valid value, it is error , need to be fixed if you get.

when you will get NaN.
1.if you do compuation against undefined variables.

let qty // undefined
let price = 100 //number

let totalPrice = qty * price  //undefined * number=>NaN

console.log(`Qty ${qty} Price ${price} totalPrice ${totalPrice}`)

2.During type conversion

Type conversion - String to Number

1.implicit type conversion
   conversion happens automatically
2.explcit type conversion
   conversion happens through conversion apis and operators

//type conversion

let a = 10  // number
let b = "20" // string but value is number 

let c = a * b  //here js conversion b(string) to number automatically - implicit
console.log(`a ${a} b ${b} c ${c}`)

//explicit conversion using parseFunction
c = a * parseInt(b)
console.log(`a ${a} b ${b} c ${c}`)

//explicit conversion using Number function 
c = a * Number(b)
console.log(`a ${a} b ${b} c ${c}`)

//explicit conversion using tenary + opeartor
c = a * +b
console.log(`a ${a} b ${b} c ${c}`)


........

//type conversion and NaN

let a = 10  // number
let b = "$20" // string but value is number 

let c = a * b  //here js conversion b(string) to number automatically - implicit
console.log(`a ${a} b ${b} c ${c}`)

//explicit conversion using parseFunction
c = a * parseInt(b)
console.log(`a ${a} b ${b} c ${c}`)

//explicit conversion using Number function 
c = a * Number(b)
console.log(`a ${a} b ${b} c ${c}`)

//explicit conversion using tenary + opeartor
c = a * +b
console.log(`a ${a} b ${b} c ${c}`)


Infinity:
.........

-div/0 -

let price = 100
let tds = 0
let totalTax = price / tds
console.log(`Price ${price} TDS ${tds} ToalTax ${totalTax}`)
.....................................................................................
			 const 

//const are read only -  cant be reinialized

let a = 10
console.log(`A ${a}`)
a = 90
console.log(`A ${a}`)

const b = 10
console.log(`B ${b}`)
b=100 // cant be reinalized
console.log(`B ${b}`)
....................................................................................
				Advanced Booleans
.....................................................................................

In javascript every thing is true,except the following values

Falsy Values:
.............
1.boolean false
2.0
3.undefined
4.NaN
5.empty string("",'')
6.null

Truthy values are except the above values are considered truthy values....
let myvar //undefined

if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}
myvar = 0
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}

myvar = ""
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}

myvar = 10 * undefined
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}


myvar = null
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}

myvar = false
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}

//
let mynewVar = "subramanian"
if (mynewVar) {
    console.log(`${mynewVar} is valid`)
} else {
    console.log(`${mynewVar} is invalid`)
}
mynewVar = 12
if (mynewVar) {
    console.log(`${mynewVar} is valid`)
} else {
    console.log(`${mynewVar} is invalid`)
}
.....................................................................................
Operators:

==  - only value match
=== : Strict match -  type + value

//== and ===

let a = 10
let b = "10"

if (a == b) {
    console.log("a and b are equal")
} else {
    console.log("a and b are not equal")
}

//test both value and type -  both must match- if it is true, then only it is true
if (a === b) {
    console.log("a and b are equal")
} else {
    console.log("a and b are not equal")
}
.....................................................................................
tenary:
......
 To replace if else
 based on truthy and falsy values...

//tenary operator

let a = 10
let b = 20
if (a === b) {
    console.log("a and b are equal")
} else {
    console.log("a and b are not equal")
}
//using tenary
(a === b) ? console.log("a and b are equal") : console.log("a and b are not equal")

let c = (a === b) ? "a and b are equal" : "a and b are not equal"
console.log(c)
...................................................................................
				Functions
..................................................................................

function is basic building block of javascript.
//functions -

//basic function delclaration and invocation

function sayHello() {
    console.log('Hello function')
}
sayHello()


//function ars and parameters
//a and b are args
function add(a, b) {
    let c = a + b
    console.log(`The add result is ${c}`)
}
//10,10 are parameters
add(10, 10)
//
let x = 10
let y = 90
add(x, y)
.................

//es 6 default args 
function add(a = 0, b = 0) {
    console.log(`a ${a} b ${b}`)
    let c = a + b
    console.log(`The add result is ${c}`)
}
add(10, 10)
add() // no value is passed
.............

Returning value:
function add(a = 0, b = 0) {
    return a + b
}
console.log(`The result is ${add(10,10)}`)
..................................................................................
			  Higher order function
..................................................................................

Every function is literal, since funcition literal

 => can be assigned to a variable
 => can be passed as parameter to another function
 => can be returned from another funcition.
//function as literal

//synax -1 
function sayHello(name = 'defaultName') {
    console.log(`Hello ${name}`)
}
const hello = sayHello // here we are not calling 
//if function is assigned to a variable, that variable can be used to invoke that function.
hello('subramanian')

//syntax 2: anonmous function 
const hai = function (name = 'default') {
    console.log(`Hai ${name}`)
}
hai('Subramanian')

const add = function (a = 0, b = 0) {
    return a + b
}
console.log(add(10,10))
.....................................................................................
			   Arrow Functions
.....................................................................................

Arrow functions replacement for es 5 anonmous function with simple ,elegant syntax.

//es 5 anonmous function
let hello = function (name = 'default') {
    console.log(`Hello ${name}`)
}
hello('Subramanian')
//es 6 arrow function
let hai = (name = 'default') => {
    console.log(`Hai ${name}`)
}
hai('Subramanian')
//short cuts for arrows
//if function has only one line of body : remove {}
hai = (name = 'default') => console.log(`Hai ${name}`)
hai('Subramanian')

//returns and arrow
let add = function (a = 10, b = 20) {
    return a + b
}
console.log(add())
//arrow 
add = (a = 10, b = 20) => {
    return a + b
}
console.log(add())
//short cut :if function returns only we can remove {} and return statement
add = (a = 10, b = 20) => a + b
console.log(add())

//if function takes single arg no default value, and return the same 
let getStockValue = function (value) {
    return value
}
console.log(getStockValue(10))

//arrow
getStockValue = (value) => value
console.log(getStockValue(10))
//if no default,single arg , we can remove ()
getStockValue = value => value
console.log(getStockValue(10))
.....................................................................................
java script functions are first-class, which means they can be stored in variables    and data structures, and can be passed as arguments to and returned from other higher-order functions.

How to pass function as parameter to another? 

//how to pass values into function .

function add(a, b) {
    let c = a + b
    console.log(c)
}
add(10, 10)
let x = 10
let y = 20
add(x, y)
/////////////////////////////////////////////////////////////////////////////////////

function sayHello(hello) {
    hello()
}
//pass function as parameter
sayHello(function () {
    console.log('Hello')
})
let myHello = function(){
    console.log('my Hello')
}
sayHello(myHello)

.........................................


//arrow functions : function as parameter
const sayHello = hello => hello()
//pass function as parameters
// sayHello(function () {
//     console.log('hello')
// })

sayHello(() => console.log('hello'))
const hello = () => console.log('my new hello')
sayHello(hello)
...................................................................................
			 HOF - with complex logic
...................................................................................

//
const login = (name = 'admin', password = 'admin', resolve, reject) => {
    if (name === 'admin' && password === 'admin') {
        resolve('Login success')
    } else {
        reject('Login failed')
    }
}

login('admin', 'admin', function (status) {
    console.log(status)
}, function (err) {
    console.log(err)
})

login('admin', 'admin', status => console.log(status), err => console.log(err))

....................................................................................
			 HOF-functions can be returned from another function
.....................................................................................

//how to return function from another

// function counter() {
//     console.log('counter')
//     return function inc() {
//         console.log('inc')
//     }
// }
// function counter() {
//     console.log('counter')
//     return function () {
//         console.log('inc')
//     }
// }

// function counter() {
//     console.log('counter')
//     return () => console.log('inc')
// }


// const counter = () => {
//     console.log('counter')
//     return () => console.log('inc')
// }


const counter = () => () => console.log('inc')
// const fn = counter()
// console.log(fn)
// fn()
counter()()
..................

// const counter = () => {
//     return (value) => {
//         return value * 2
//     }
// }
const counter = () => value => value * 2
console.log(counter()(10))
.....................................................................................
			Objects
.....................................................................................
Js is object based language.

How to create objects?

1.Constructor pattern
  es 5 way - function
  es 6 way - class
2.literal Patterns
  no class,no functions


ES 5 functions
//object template.

function Employee(id = 0, name = 'default', salary = 0) {
    //instance variables
    this.id = id
    this.name = name
    this.salary = salary
    //instance methods
    this.calculateSalary = (noOfdays) => {
        return this.salary * noOfdays
    }
}
//create object  
//emp is reference variable
//new is operator
//Employee() , constructor call 
let emp = new Employee(12, 'Subramanian', 1000)
console.log(`id ${emp.id} ${emp.name} ${emp.calculateSalary(100)}`)

.....................................................................................

class Based:
//object template.

// function Employee(id = 0, name = 'default', salary = 0) {
//     //instance variables
//     this.id = id
//     this.name = name
//     this.salary = salary
//     //instance methods
//     this.calculateSalary = (noOfdays) => {
//         return this.salary * noOfdays
//     }
// }

class Employee {
    constructor(id = 0, name = 'default', salary = 0) {
        //instance variables
        this.id = id
        this.name = name
        this.salary = salary
    }
    //instance methods
    // calculateSalary = (noOfdays) => {
    //     return this.salary * noOfdays
    // }
    calculateSalary(noOfdays) {
        return this.salary * noOfdays
    }
}
//create object  
//emp is reference variable
//new is operator
//Employee() , constructor call 
let emp = new Employee(12, 'Subramanian', 1000)
console.log(`id ${emp.id} ${emp.name} ${emp.calculateSalary(100)}`)
....................................................................................
				Code Reuse - Hierachy

There are two types of hierachy

1.IS-A - inheritance
   es 5 inheritance -  prototype based inheritance
   es 6 inheritance - class based inheritance.
2.HAS-A -compostion

//base class
class Account {
    constructor() {
        console.log('Account ')
    }
    //methods
    deposit() {
        return 10
    }
    withdraw() {
        return 50
    }
}

//derived
class SavingsAccount extends Account {
    constructor() {
        super()
        console.log('SavingsAccount ')
    }
    //override
    deposit() {
        return 10 * super.deposit()
    }
    withdraw() {
        return 20 * super.withdraw()
    }
}

let sb = new SavingsAccount()
console.log(sb.deposit())
console.log(sb.withdraw())
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//literal objects 
let customer = {
    id: 1,
    name: 'Subramanian',
    city: 'Coimbatore'
}
console.log(customer.id, customer.name, customer.city)
customer.id = 90
customer.name = 'ram'
console.log(customer.id, customer.name, customer.city)

//complex literal : has -a : object has other objectPosition: 

let person = {
    id: 1,
    name: 'Subramanian',
    address: {
        street: '10th street',
        city: 'Coimbatore'
    }
}
console.log(person.id, person.name, person.address.city)
....................................................................................
				Object Destructuring - es 6 feature
.................................................................................

How to pass object as parameter to function and print?


function displayEmployee(employee) {

    //print employee
    console.log(`id ${employee.id}`)
    console.log(`name ${employee.name}`)
    console.log(`salary ${employee.salary}`)
    console.log(`city ${employee.address.city}`)

}

//pass object as parameter
displayEmployee({ id: 1, name: 'Subramanian', salary: 2000, address: { city: 'Coimbatore' } })

let emp = {
    id: 1,
    name: 'Subramanian',
    salary: 2000,
    address: {
        city: 'Coimbatore'
    }
}
displayEmployee(emp)
.....................................................................................

Simple Destructuring:

function displayEmployee(employee) {
    //de structure the object properties into local variables
    const { id, name, salary, address: { city } } = employee
    //print employee
    console.log(`id ${id}`)
    console.log(`name ${name}`)
    console.log(`salary ${salary}`)
    console.log(`city ${city}`)
}

//pass object as parameter
displayEmployee({ id: 1, name: 'Subramanian', salary: 2000, address: { city: 'Coimbatore' } })

let emp = {
    id: 1,
    name: 'Subramanian',
    salary: 2000,
    address: {
        city: 'Coimbatore'
    }
}
displayEmployee(emp)
...

Arg Destructuring:
function displayEmployee({ id, name, salary, address: { city } }) {
    console.log(`id ${id}`)
    console.log(`name ${name}`)
    console.log(`salary ${salary}`)
    console.log(`city ${city}`)
}

//pass object as parameter
displayEmployee({ id: 1, name: 'Subramanian', salary: 2000, address: { city: 'Coimbatore' } })

let emp = {
    id: 1,
    name: 'Subramanian',
    salary: 2000,
    address: {
        city: 'Coimbatore'
    }
}
displayEmployee(emp)


...
arrow version
......................

const displayEmployee = ({ id, name, salary, address: { city } }) => {
    console.log(`id ${id}`)
    console.log(`name ${name}`)
    console.log(`salary ${salary}`)
    console.log(`city ${city}`)
}
..................................................................................
			 Dynamic object population and deStructuring
				  (Returing object)
...................................................................................

How to return object from the function

function getStock() {
    //return object
    return {
        id: 1,
        symbol: 'google',
        qty: 100,
        price: 10000
    }
}
console.log(getStock())

i want to return object with dynamic values

function getStock(id = 1, symbol = 'google', qty = 0, price = 0) {
    //return object
    return {
        id: id,
        symbol: symbol,
        qty: qty,
        price: price
    }
}
console.log(getStock(100, 'Meta', 1000, 18900))
console.log(getStock())

De Structuring and dynamic values:
.................................
function getStock(id = 1, symbol = 'google', qty = 0, price = 0) {
    //key:value
    //instanceVariable:localvariable
    //if both variable are same ; id:id => we can remove one 
    return {
        id,
        symbol,
        qty,
        price
    }
}
console.log(getStock(100, 'Meta', 1000, 18900))
console.log(getStock())

arrow version:
const getStock = (id = 1, symbol = 'google', qty = 0, price = 0) => {
    return {
        id,
        symbol,
        qty,
        price
    }
}
console.log(getStock(100, 'Meta', 1000, 18900))
console.log(getStock())

...

arrow with simplified notation:
const getStock = (id = 1, symbol = 'google', qty = 0, price = 0) => ({
        id,
        symbol,
        qty,
        price
})
console.log(getStock(100, 'Meta', 1000, 18900))
console.log(getStock())
.....................................................................................
				Modularity
.....................................................................................
In java Modularity , is presented via "Packages"

Package organize the code  logically.

Customer.java

package com.ibm.cms

public class Customer{}

Java organizes code folders and files Physically.

d:/javaapps/src/
    com/ibm/cms/Customer.java

What about javascript Modularity?

 Javascript is file based modularity physically
 but logically there is no such modularity at language level.

collection of variable declarations and function.

Once js started growing in large scale, dev struck to organize code.

2000, Smart developers started thinking about how to modualrize js code.
 

Module design patterns came.

1.Namespace design pattern : 2000 : jquery
2.AMD -Async Module Defintion : dojo
---------------------------------------------------------
3.CJS - Common JS =  namespace + amd:2005 on wards
4.ES 6 Module design pattern:2012-2015  = amd + cjs
------------------------------------------------------------
5.System :2007 = AMD = CJS + ES 6
6.UMD :2008 = NAMESPACE + AMD + CJS = ES 6


.....................................................................................
				ES 6 module design pattern

How to share code? and how to link files?

code:
 variables with any literals
 class
 objects
 arrays
 functions

Code sharing keywords

export 
export default

linking files and import

import
......
export :
=> export can be used to "share many variables" from the single file - multi sharing
when you export ? you can import things from the other files using
  destructuring syntax.

import {} from 'fileName'


Note:
 Web browsers do not support "es 6 module" directly.

How to run modular code?

Using build tools
Using modern browser configuration

Using build tools:
.................
webpack

How to install webpack in our project?

Steps:

1.make sure that you have package.json file
 if not , create package.json file

npm init  --yes

2.install webpack
  npm install webpack webpack-cli --save-dev

3.add webpack.config.js in the project root dir

const path = require('path');

module.exports = {
  entry: './src/index.js',
  mode:'development',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
};

4.build /bundle your code
 open package.json
 add entry into scripts

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "compile": "tsc",
    "build": "webpack --watch"
  },

5.start bundling
  open cmd and run the following command
npm run build

> es6-apps@1.0.0 build
> webpack

asset bundle.js 5.19 KiB [emitted] (name: main)
runtime modules 670 bytes 3 modules
cacheable modules 758 bytes
  ./src/index.js 146 bytes [built] [code generated]
  ./src/mylib.js 612 bytes [built] [code generated]
webpack 5.70.0 compiled successfully in 113 ms

6.add bundle file inside index.html
     <script src="dist/bundle.js"></script>



eg:
src/util.js
//declare some variables

// export const name = 'Subramanian'
// export const city = 'Coimbatore'
// export const salary = 9000
// export const status = true
// export const greet = () => 'hello'
// export const skills = ['react', 'mobile']

const name = 'Subramanian'
const city = 'Coimbatore'
const salary = 9000
const status = true
const greet = () => 'hello'
const skills = ['react', 'mobile']

export { name, city, salary, status, greet, skills }

src/index.js
import { name,city,status,skills,greet } from "./util";

console.log(name,city)
console.log(status)
console.log(skills)
console.log(greet())
..
src/services/user.service.js


// export default class TodoService {
//     constructor() {

//     }
//     //
//     list() {
//         return [{ id: 1, name: 'subramanian' }]
//     }
// }

class UserService {
    constructor() {

    }
    //
    list() {
        return [{ id: 1, name: 'subramanian' }]
    }
}
export default UserService;

src/index.js
import  UserService  from "./services/user.service";

let userService = new UserService()
console.log(userService.list())

















