				   React Native
.....................................................................................

What is React  Native?
  React Native is lib built for mobile cross platform native mobile apps.
React native has been built on the core concepts of react.js.


What is React.js?
 React.js is javascript lib for building user interfaces.
 User interface apps for web browsers.
 "React is modern SPA lib created by face book based on "Flux Design Pattern"
Architecture for libs and frameworks:


Plain JS
			 Application(dom) -plain js
			     |
			  Javascript Engine
			      |
			  Browser Engine




Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine



What is jquery engine?
  Jquery engine is also javascript program.




                             Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		               -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		         Application(React)
			     |
		       ---------------------------
	              React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine
...................................................................................
				React Future
.....................................................................................

React was built by face book only for web browsers, later facebook decided to scale react for building other types of user application (mobile,iot applications).

React can be used to build application for 
........................................
1.browsers : Desktop -  react js
2.Mobile Apps : React Native

face book is working on many futures projects related to react
3.React VR : Virtual Reality.
4.React Car : For car applications
5.React TV  : React for TV.
6.React IOT : any devices

.............................................................................................
				Setup React Project
..............................................................................................

Create React App - tool to setup project
https://create-react-app.dev/

Two ways of setting project 

via npm global modules
via npx modules

via npm:

Install tool:

open cmd:

install tool first

npm install create-react-app -g

create a app
create-react-app my-app

Create project directly without installing create-react-app tool

npx create-react-app my-app
.....................................................................................
React Core Concepts:

Why Js?
 JS was created to process HTML pages like create new element,update existing element,remove element,select elements
   This Programming is called "DOM" Programming.

HTML internal work flow:
.......................
index.html -  source code

<html>
 <head>
   <title>HTML</title>
 </head>
 <body>
     <h1>Welcome</h1>
 </body>
</html>
 --------------Browser
  |
 loader : load source code into browser
  |
  uses protocal 
   file or http
  |
  parser : Parser is spcial compiler which converts source code into lexical tree
           (String tree)
   |

html
  head
   title
      HTML
   title
 head
 body
     h1
      Welcome
     h1
 body
html
   |
   compiler: Compilation: convert source code into assembly language
   |
html - LOAD XXX
  head-
   title
      HTML
   title
 head
 body
     h1
      Welcome
     h1
 body
html
.......................&&&&&&&&&&&&&..........................................  
                                Runtime

During runtime, we need to allocate memory for the program.

Runtime will create LinkedList(c) for the entire html document

html - Node
  head-
   title
      HTML
   title
 head
 body -Node
     h1  - Node
      Welcome
     h1
 body
html

Nodes are connected each other in Hierchical Structure(Tree)

Linking the Nodes (Tree)

body -Node
    |
     h1  - Node
      |
        Welcome
     h1
 body
 |
Layout Engine/Paint Engine
   |
  will convert into pxs - Final Ouput

            At End , the html page is "Tree Data Structure"
..........................***.....................................................
			The Netscap Communication and HTML Tree
.................................................................................
Netscap started a project,to access rendered "tree" via program.

Netcap initally decided to introduce c program,later who decided to change their mind to "Java".
Java was not also not suitable , the reason was , java was the big language , putting the language inside browser is not suitable.

Nets cap finally decided who did not want eiter c or java, but java like language
 - "The Birth of Javascript" 

The Javascript was introduced  as light weight programming language to access the tree,process the tree.

How to reprsent html inside javascript engine?
 
 Netscap took an idea "Object" Model.

Every html element is object, which is created once the browser loads the html into browser,and also object can be created using apis..

Javascript engins forms the tree called "Object Tree"
.....................................................................................
			Netscap Object and W3c
.....................................................................................

After Object tree model and javascript success, W3C  decided to standarize this arch/technology.

After standarization, w3c publish a spec called "DOM" -  Document Object Model

How dom works?

index.html           Broser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                Every Html ELEMENT Inside Browser is "C Program"

	        Every Html ELEMENT Inside javascript engine is "Object"

HTML Elements(p,h1,div,img) are  represented inside browser as "Node", inside Javascript Engine "Object - DOM "


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.

Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements:
......................

HTMLElement document.getElementById(id)	       Find an element by element id
HTMLElement Document document.getElementsByTagName(name)	Find elements by tag name
HTMLElement document.getElementsByClassName(name)	Find elements by class name
HTMLElement document.querySelectory(selector)        find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements:


document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element
.....................................................................................				DOM Programming
.....................................................................................

How to implement dom programming?

1.using plain js
  if we use plain js , it is very difficult to build large applications

2.using frameworks and libs

2000 - The first javascript framework - DOJO
2002-2005 - JQuery - is the second most powerfull dom lib.
After 2006 - many js libs and frameworks introduced.....
.....................................................................................
How to create dom element using plain js?

function createElement() {
    const Heading = document.createElement('h1')
    Heading.innerHTML = 'Welcome to React'
    //attach on to the existing tree 
    const root = document.getElementById('root')
    root.appendChild(Heading)
}
createElement()


React core lib:

react.js
react-dom.js -  only browser - react-native.js

Objects
React
ReactDOM.


//dom element using react .
import React from "react";
import ReactDOM from "react-dom/client";

//declare dom element
const Heading = <h1>Hello React!</h1>

//Get the root element
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(Heading)



The code above , we can see mixure of javascript and html.

How browser understands this code coimbination?

  The browser never understands this code directly.

What is this code is all about?
    
 Face book created a mini /small language for building react application - JSX language

JSX Code is not executed by the browser directly rather, it is compiled into plain js, then it is excuted.
..............................................................................................
				 Components
.............................................................................................

What is Component?
   Component  is nothing but "Object".

Component term introduced by MicroSoft in 1980s. According to Microsoft Component is object which is having "state(variables),behaviours(methods),User Interface(visual Representation)".

Component represents User Interface
Component is Object which represents User Interface.
User interface in browser is represented by HTML element or elements

Component can be represented some time , the object which helps to make up the Userinterface(invisible user interface).


element is <h1>Hello</h1>

elements are <div><div><h1>Hello</h1></div></div>

Plain Object:
 Object without ui is called plain object.
eg:
   function Employee() {
     this.id = 0;
     this.calculate=function(){}
   }

   new Employee()

DOM : Document Object Model
 
Document -  html
Object Model - Representation of HTML elements

Why We use Components model/Architecture?
  
=>Componets are independant objects.
=>Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.
 
Eg : 
 I am creating a component called "tax calculator".
 
lets say i want to use the tax calculator inside my hr application and inside my sale application , and purchase application.

..............................................................................................
				One Component is not a component
.............................................................................................
In large application, we create more components.
All components we coimbine to make up other big components or application.
Such wiring(connecting) components forms the structure called "component tree".

Component Tree:
   =>Object tree / DOM Tree / Virutal DOM Tree.
.....................................................................................
How to create Components in react?

We have three patterns.

1.Variable Pattern
2.function pattern
3.ES 6 class Pattern


1.variable pattern

//dom element using react .
import React from "react";
import ReactDOM from "react-dom/client";

//variable Pattern
//Heading is just variable which points DOM object/component
const Heading = <h1>Hello React!</h1>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(Heading)

2.functions pattern

import React from "react";
import ReactDOM from "react-dom/client";

//functions pattern 
//es 5 function 
function Heading(){
    //should return component  / object 
    return <h1>Welcome to React</h1>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))

//function call 
rootElement.render(Heading())

Programming models:
1.imperative programming
   you write logic
   you write infrastructure code
eg: plain js dom code

2.declarative programming
 more readable code
 less infrastructure/boiler plate code-provided by frameworks/libs
 react code.


//imperative way of calling function - it is not recommened.
rootElement.render(Heading()) 

import React from "react";
import ReactDOM from "react-dom/client";

//functions pattern 
//es 5 function 
function Heading() {
    //should return component  / object 
    return <h1>Welcome to React</h1>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))

//function call : imperative code 
// rootElement.render(Heading())
//function call : declarative code
rootElement.render(<Heading />)

..............
Functions:
import React from "react";
import ReactDOM from "react-dom/client";

//functions pattern 
//es 5 function 
// function Heading() {
//     //should return component  / object 
//     return <h1>Welcome to React</h1>
// }

//es 6 Arrow Function 
const Heading = () => <h1>Welcome to React</h1>


const rootElement = ReactDOM.createRoot(document.getElementById('root'))

//function call : imperative code 
// rootElement.render(Heading())
//function call : declarative code
rootElement.render(<Heading />)
...................................................................................
ES 6 class Pattern.
import React from "react";
import ReactDOM from "react-dom/client";

//class component
class Heading extends React.Component {
    render() {
        return <h1>Welcome to React!!</h1>
    }
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

//function call : imperative code 
// rootElement.render(Heading())
//function call : declarative code
rootElement.render(<Heading />)
.....................................................................................
				Component Tree
			     Component Composition
.....................................................................................

DRY

How to create Component tree?

Layouts:

 Page
   Header
   Body 
   Footer

index.js

import React from "react";
import ReactDOM from "react-dom/client";

const Header = () => <header>
    <h1>IBM</h1>
</header>

const Body = () => <div>
    <section>
        <p>this is sample section</p>
    </section>
    <section>
        <p>this is sample section</p>
    </section>
</div>
const Footer = () => <footer>
    <p>Footer</p>
</footer>

const Page = () => <div>
    <Header />
    <Body />
    <Footer/>
</div>


//Root Node 
const App = () => <div>
    <Page />
</div>
..............................................................................
..............................................................................................
				React Dev tools
..............................................................................................

React dev tool is used to visualize the component tree in the browser, without looking the source code ,how the tree has been constructured.

How to install react dev tool?

https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en

How to use react dev tool?

 1.lanuch application
 2.open dev tool inside chrome

.............................................................................................
				Component Compostion and Modularity
..............................................................................................

In react application, we dont / never dump the code into single file, we need to modularize the application.

File Structure
Is there a recommended way to structure React projects?

  React doesn’t have any opinions on how you put files into folders. 
  That said there are a few common approaches popular in the ecosystem you may want to consider.

Grouping by "features" or "routes-menu"
  One common way to structure projects is to locate CSS, JS, and tests together inside folders grouped by feature or route.
			
common or util /
  Avatar.js
  Avatar.css
  APIUtils.js
  APIUtils.test.js
feed/
  index.js
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  FeedAPI.js
profile/
  index.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css
  ProfileAPI.js

Grouping by file type
 Another popular way to structure projects is to group similar files together, for example:

api/
  APIUtils.js
  APIUtils.test.js
  ProfileAPI.js
  UserAPI.js
components/
  Avatar.js
  Avatar.css
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css

Some people also prefer to go further, and separate components into different folders depending on their role in the application. For example, Atomic Design is a design methodology built on this principle. Remember that it’s often more productive to treat such methodologies as helpful examples rather than strict rules to follow.

               "https://bradfrost.com/blog/post/atomic-web-design/"


File Name conventions:

 FileName must match component feature  - profile 

File Name can be saved as fileName.js or fileName.jsx

Rules for jsx extensions:

-Root file (index,App) files must not be saved with ".jsx" , root files must be saved only with .js extension.

-Barrel export feature must be used in large application.

eg:
src/profile/profile.jsx

const Profile = () => <div>
    <h1>Profile</h1>
</div>

//export default Profile
export { Profile }

src/index.js
import React from "react";
import ReactDOM from "react-dom/client";
import { Profile } from "./profile/profile";
//Root Node 
const App = () => <div>
    <Profile/>
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)

Task:
  Isloate the layout into separate folders and files 

.....................................................................................
			JSX Rules
................................................................................

JSX - Javascript and XML

What is JSX?
 JSX is dsl language to create user interfaces

What is relationship with XML?

 Inside JSX , we write javascript code and HTML code only not xml code.

Why the term XML is used?

 When we write JSX code, we need stable mark up standards.

You know very well HTML has weak parser  that means 
 <h1>hello
when run the code , the html parser does not stop rendering hello, it never throws any error

in order to avoid instability code inside jsx during compilation, JSX team adopted XML Parser rules, since XML parser has strong parser

Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 


import React from "react";
import ReactDOM from "react-dom/client";


const Greeting  = ()=>{
   // return <h1>Hello 
   return <h1>Hello</h1>
}
//Root Node 
const App = () => <div>
    <Greeting/>
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)


2. In xml you must have one single root element.
  all elements must be organized under single root element.

const Greeting = () => {
    // return <h1>Hello
    return <div>
        <h1>IBM</h1>
        <p>this is paragraph</p>
    </div>

}

In this approach , there is problem in UI design, react forces us to have unncessary
container elements like div

React 16 had introduced a concept called "Fragements" 

What is fragement?
 It is invisble container element which will not be included in the output like.
 Fragements are very usefull for escapping the compiler errors.

There are different syntaxs to write  fragements.

syntax 1
const Greeting = () => {
    return <React.Fragment>
        <h1>IBM</h1>
        <p>this is paragraph</p>
    </React.Fragment>
}

syntax 2

const Greeting = () => {
    return <Fragment>
        <h1>IBM</h1>
        <p>this is paragraph</p>
    </Fragment>
}

syntax 3
const Greeting = () => {
    return <>
        <h1>IBM</h1>
        <p>this is paragraph</p>
    </>
}


3.Component names should start with Uppercase,generally would be noun.

const greeting = () => {
    return <>
        <h1>IBM</h1>
        <p>this is paragraph</p>
    </>
}
react-dom.development.js:86 Warning: The tag <greeting> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at greeting
    at div
    at App


				 How jsx code gets compiled?

How code gets compiled?

source code: jsx code

function Welcome() {
      return <h1>Welcome To React!</h1>;
}
	|
     babel.js - compiler 
|	
|
compiled code
function Welcome() {
  return React.createElement(
    'h1',
    null,
    'Welcome To React!'
  );
}
|
runtime : react engine
function Welcome() {
  return React.createElement(
    'h1',
    null,
    'Welcome To React!'
  );
}
|
//React.createElement
function createElement(args){
   document.createElement(args); // low level api call
}
....................................................................................
...................................................................................
				How to Style components
.....................................................................................

React applies styles via style language

Web
 - CSS
Mobile App
 -platform specific style

How to add css to an html element?

=> using class attribute  - external style
=> using style attribute - inline

HTML :
<div class="container">

</div>

<div style="background-color:red">

</div>

css /style can be applied to the html elements in two ways

1.during design pattern
 using style or class attribute
2.during runtime -dynamic css
  using js 

js offers style properties as object
 all js css properties given

element.style

React uses this style object to style elements , which is used in react native as well

//dom element using react .
import React from "react";
import ReactDOM from "react-dom/client";
import './App.css'


//style object 
const styleobj = {
    color: 'red',
    backgroundColor: 'yellow',
    border: "thick solid #0000FF"
}
const Heading = () => <>
    <h1 class="App-header">Welcome to React Native</h1>
    <h2 style={styleobj}>React</h2>
</>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<Heading />)
.....................................................................................
.........
				How to Style components
..............................................................................................

CSS integration:
................

How to add css to an html element?

=> using class attribute  - external style
=> using style attribute - inline

HTML :
<div class="container">

</div>

<div style="background-color:red">

</div>

HTML ATTRIBUTES And JSX:

 We cant /should not add html attributes directly in jsx code.
 JSX uses certain rules for adding html attributes.

 "Since JSX is closer to JavaScript than to HTML, React DOM uses "camelCase property naming convention" instead of HTML attribute names"

For example, class becomes className in JSX, and tabindex becomes tabIndex.

<div className="container" tabIndex>

</div>

List of jsx attributes:
accept acceptCharset accessKey action allowFullScreen alt async autoComplete
autoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked
cite classID className colSpan cols content contentEditable contextMenu controls
controlsList coords crossOrigin data dateTime default defer dir disabled
download draggable encType form formAction formEncType formMethod formNoValidate
formTarget frameBorder headers height hidden high href hrefLang htmlFor
httpEquiv icon id inputMode integrity is keyParams keyType kind label lang list
loop low manifest marginHeight marginWidth max maxLength media mediaGroup method
min minLength multiple muted name noValidate nonce open optimum pattern
placeholder poster preload profile radioGroup readOnly rel required reversed
role rowSpan rows sandbox scope scoped scrolling seamless selected shape size
sizes span spellCheck src srcDoc srcLang srcSet start step style summary
tabIndex target title type useMap value width wmode wrap

"https://reactjs.org/docs/dom-elements.html"

adding Events Handlers

 <button onClick={method}></button>
...................................................................................................................................................................................
				  Dynamic Page - Data Binding
..............................................................................................

Types of web

1.static web
   -only html markup,hand coded.
2.dynamic web
   - html is created on fly with data

How to add data in the component /how to bind data in the component?

data can be represented in many ways.

-primitives - numbers,strings,boolean
-objects - literal objects, objects created out of class/function
-arrays - it is also object but collection 

How to add data in the component /how to bind data in the component?

data can be represented in many ways.

-primitives - numbers,strings,boolean
-objects - literal objects, objects created out of class/function
-arrays - it is also object but collection 

How to bind data inside jsx?

let name='subramanian'

<h1>Hello {name} </h1>

{} -  databinding syntax.

data binding can be
{variable}
{expression} - {10*10} {getValue()} {emp.id}

eg:
import React from "react";
import ReactDOM from "react-dom/client";



const Greeting = () => {
    const firstName = 'Subramanian'
    const lastName = 'Murugan'
    return <>
        <h1>Hello {firstName} {lastName} </h1>
    </>
}
const App = () => <div>
    <Greeting />
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
...................................................................................
.....................................................................................
			  Compoent Design Principles of React
.....................................................................................


Data can be declared for a component in two ways.

1.data is supplied from outside the component.
2.data is supplied within the component

1.Data is supplied from outside the component.

When component receives data from the outside, this pattern is called as "property pattern" / props pattern.

Outside the component means what? What is outside for the component?

YOu know very well , react creates components and assembles them in hierachical order(tree)
in the tree model, the one component called as "parent" component and other components are called child component and sibiling components.

outside means "Parent".

    "Data is supplied from the parent compoent to child component" - Props pattern /Property pattern

import React from "react";
import ReactDOM from "react-dom/client";

//react stores all properties inside a single object , which is called as prop or property object 
// function Greeting(props) {
//     console.log(props)
//     return <h1>{props.message} {props.name}</h1>
// }
// const Greeting = (props) => <h1>{props.message} {props.name}</h1>

//object destructuring
// const Greeting = props => {
//     const { name, message } = props
//     return <h1>{message} {name}</h1>
// }
const Greeting = ({ message, name }) => <h1>{message} {name}</h1>


// parent Component
// const App = () => {
//     return Greeting('Subramanian')
// }
const App = () => {
    // name is property / prop
    return <>
        <Greeting name="Subramanian" message="Hello" />
        <Greeting name="Geetha" message="Welcome" />
        <Greeting name="Dhivya" message="Hai" />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
....................................................................................
			   property types

1.primtives
  string,numbers,boolean
can be hardcoded or via variables

import React from "react";
import ReactDOM from "react-dom/client";

const User = props => {
    const { id, name, status, address: { city } } = props
    return <>
        <h1>Id {id}</h1>
        <h1>Name {name}</h1>
        <h1>Status {status ? "Available" : "Not Available"}</h1>
        <h1>City {city}</h1>
    </>
}


const App = () => {
    let status = false
    let address = {
        city: 'Coimbatore'
    }
    return <>
        <User id={1} name="Subramanian" status={status} address={address} />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)

..............................................................................................
			What if i dont supply Props to Component -Default Props
.............................................................................................
if you dont pass any property, we can supply default props which saves lot of runtime bugs.

When you design component, it is highly recommended to have default Props- This is best Practice

//default Args
function multiply(a = 0, b = 0) {
    console.log(`a ${a} b ${b}`)
    return a * b; //NaN
}
console.log(multiply(6, 3))
console.log(multiply())

import React from "react";
import ReactDOM from "react-dom/client";

const User = props => {
    const { id, name, status, address: { city } } = props
    return <>
        <h1>Id {id}</h1>
        <h1>Name {name}</h1>
        <h1>Status {status ? "Available" : "Not Available"}</h1>
        <h1>City {city}</h1>
    </>
}

//setting default properties
User.defaultProps = {
    id: 0,
    name: 'Your Name',
    status: false,
    address: {
        city: 'Your city '
    }
}


const App = () => {
    let status = false
    let address = {
        city: 'Coimbatore'
    }
    return <>
        <User />
        <User id={1} name="Subramanian" status={true} />

    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)

..............................................................................................
			Property Validation or Property Constraints
.............................................................................................

Javascript is dynamic typed language, meaning that the type of variable is not verified during compile time.

dyamic typed/weak typing

var a=1;
console.log(a) => 1 => type is number

you can reinitalize the with different types
a="hello"
console.log(a) => "hello" => type is string

In c: - Strongly typed  /static typed
int a=10
a="hello" -compile time error 

Type script : Strongly static typed javascript

let a:number =10;
a="hello"


Inside compoent if pass data , can i enforce the react that accept only the type what i want.

Yes , we can do with help of property validator.
Property validator gives only warning , it wont stop rendering incase there is any type error.


in order to write property rule, react provides a separate lib "prop-types"

npm install --save prop-types


import React from "react";
import ReactDOM from "react-dom/client";
import PropTypes from 'prop-types'

const User = ({ id, name, status, address: { city } }) => {
    return <>
        <h1>Id {id}</h1>
        <h1>Name {name}</h1>
        <h1>Status {status ? "Available" : "Not Available"}</h1>
        <h1>City {city}</h1>
    </>
}

//setting default properties
User.defaultProps = {
    id: 0,
    name: 'Your Name',
    status: false,
    address: {
        city: 'Your city '
    }
}
//setting property validation rules 
User.propTypes = {
    id: PropTypes.number
}


const App = () => {
    let status = false
    let address = {
        city: 'Coimbatore'
    }
    return <>
        <User />
        <User id={"1"} name="Subramanian" status={true} />

    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)

After running:
react-jsx-dev-runtime.development.js:87 Warning: Failed prop type: Invalid prop `id` of type `string` supplied to `User`, expected `number`.
    at User (http://localhost:3000/static/js/bundle.js:29:5)
    at App
....................................................................................
			 class Components, props,and it features

Now a days class components are moved away from the react  ecyo system- only functions
import React from "react";
import ReactDOM from "react-dom/client";
import PropTypes from 'prop-types'

const User_ = ({ id, name, status, address: { city } }) => {
    return <>
        <h1>Id {id}</h1>
        <h1>Name {name}</h1>
        <h1>Status {status ? "Available" : "Not Available"}</h1>
        <h1>City {city}</h1>
    </>
}

//class components and props 

class User extends React.Component {
    render() {
        //in class component props are available via this.props variable
        //props is base class variable
        const { id, name, status, address: { city } } = this.props
        return <>
            <h1>Id {id}</h1>
            <h1>Name {name}</h1>
            <h1>Status {status ? "Available" : "Not Available"}</h1>
            <h1>City {city}</h1>
        </>
    }
}
//setting default properties
User.defaultProps = {
    id: 0,
    name: 'Your Name',
    status: false,
    address: {
        city: 'Your city '
    }
}
//setting property validation rules 
User.propTypes = {
    id: PropTypes.number
}

const App = () => {
    let status = false
    let address = {
        city: 'Coimbatore'
    }
    return <>
        <User />
        {/* <User id={"1"} name="Subramanian" status={true} /> */}
        <User id={1} name="Subramanian" status={true} />

    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)

.....................................................................................
			   comments

js comments
//
jsx comments
{/* <User id={"1"} name="Subramanian" status={true} /> */}

....................................................................................
How to break the big UI into smaller and smaller Component and how to share data 
			   Uni Directional Data flow model


eg:
 Comment <------------------------------> CommentData
   -UserInfo 
	|
	<Logo/Avatar>
        User Name
        <Comment-Test>
        <Comment-Data>


import React from "react";
import ReactDOM from "react-dom/client";

function formateDate(date) {
    return date.toLocaleDateString()

}

//without breaking 
const Comment = props => {
    return <div className="comment">
        <div className="userinfo">
            {/* Segment -1 */}
            <div className="avatar">
                <img src={props.author.avatarUrl} alt="Author Name" />
            </div>
            {/* Segment 2 */}
            <div className="username">
                <p>{props.author.name}</p>
            </div>
            {/* Segment 3 */}
            <div className="commenttext">
                <p>{props.text}</p>
            </div>
            {/* Segment 4 */}
            <div className="commentdate">
                {formateDate(props.date)}
            </div>
        </div>
    </div>
}

const App = () => {
    //pass data to the comments:this data may come from api later 
    const comment = {
        date: new Date(),
        text: 'React is awesome lib',
        author: {
            name: 'Subramanian',
            avatarUrl: 'http://placekitten.com/g/64/64'
        }
    }

    return <>
        <Comment date={comment.date} text={comment.text} author={comment.author} />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
...................................................................................

How to extract Components?
Avatar
UserInfo

import React from "react";
import ReactDOM from "react-dom/client";

function formateDate(date) {
    return date.toLocaleDateString()

}
export const Avatar = props => {
    return <div className="avatar">
        <img src={props.avatarUrl} alt="Author Name" />
    </div>
}
export const User = props => {
    return <div>
        <p>{props.name}</p>
    </div>
}

export const UserInfo = props => {
    return <div className="userinfo">
        <Avatar avatarUrl={props.author.avatarUrl} />
        <User name={props.author.name} />
    </div>
}
export const CommentDetails = props => {
    return <div>
        <div className="commenttext">
            <p>{props.text}</p>
        </div>
        <div className="commentdate">
            {formateDate(props.date)}
        </div>
    </div>
}
//with breaking 
export const Comment = props => {
    return <div className="comment">
        <div className="userinfo">
            <UserInfo author={props.author} />
        </div>
        <div>
            <CommentDetails text={props.text} date={props.date} />
        </div>
    </div>
}


export const App = () => {
    //pass data to the comments:this data may come from api later 
    const comment = {
        date: new Date(),
        text: 'React is awesome lib',
        author: {
            name: 'Subramanian',
            avatarUrl: 'http://placekitten.com/g/64/64'
        }
    }

    return <>
        <Comment date={comment.date} text={comment.text} author={comment.author} />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)










